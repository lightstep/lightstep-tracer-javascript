/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.exportSymbol('proto.lightstep.collector.Auth', null, global);
goog.exportSymbol('proto.lightstep.collector.Command', null, global);
goog.exportSymbol('proto.lightstep.collector.InternalMetrics', null, global);
goog.exportSymbol('proto.lightstep.collector.KeyValue', null, global);
goog.exportSymbol('proto.lightstep.collector.Log', null, global);
goog.exportSymbol('proto.lightstep.collector.MetricsSample', null, global);
goog.exportSymbol('proto.lightstep.collector.Reference', null, global);
goog.exportSymbol('proto.lightstep.collector.Reference.Relationship', null, global);
goog.exportSymbol('proto.lightstep.collector.ReportRequest', null, global);
goog.exportSymbol('proto.lightstep.collector.ReportResponse', null, global);
goog.exportSymbol('proto.lightstep.collector.Reporter', null, global);
goog.exportSymbol('proto.lightstep.collector.Span', null, global);
goog.exportSymbol('proto.lightstep.collector.SpanContext', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.SpanContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lightstep.collector.SpanContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.SpanContext.displayName = 'proto.lightstep.collector.SpanContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.SpanContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.SpanContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.SpanContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.SpanContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    spanId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    baggageMap: (f = msg.getBaggageMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.SpanContext}
 */
proto.lightstep.collector.SpanContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.SpanContext;
  return proto.lightstep.collector.SpanContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.SpanContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.SpanContext}
 */
proto.lightstep.collector.SpanContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSpanId(value);
      break;
    case 3:
      var value = msg.getBaggageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.SpanContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.SpanContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.SpanContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.SpanContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getSpanId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getBaggageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional uint64 trace_id = 1;
 * @return {string}
 */
proto.lightstep.collector.SpanContext.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.lightstep.collector.SpanContext.prototype.setTraceId = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 span_id = 2;
 * @return {string}
 */
proto.lightstep.collector.SpanContext.prototype.getSpanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.lightstep.collector.SpanContext.prototype.setSpanId = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * map<string, string> baggage = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lightstep.collector.SpanContext.prototype.getBaggageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.lightstep.collector.SpanContext.prototype.clearBaggageMap = function() {
  this.getBaggageMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lightstep.collector.KeyValue.oneofGroups_);
};
goog.inherits(proto.lightstep.collector.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.KeyValue.displayName = 'proto.lightstep.collector.KeyValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lightstep.collector.KeyValue.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.lightstep.collector.KeyValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 2,
  INT_VALUE: 3,
  DOUBLE_VALUE: 4,
  BOOL_VALUE: 5,
  JSON_VALUE: 6
};

/**
 * @return {proto.lightstep.collector.KeyValue.ValueCase}
 */
proto.lightstep.collector.KeyValue.prototype.getValueCase = function() {
  return /** @type {proto.lightstep.collector.KeyValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lightstep.collector.KeyValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    doubleValue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    boolValue: jspb.Message.getFieldWithDefault(msg, 5, false),
    jsonValue: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.KeyValue}
 */
proto.lightstep.collector.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.KeyValue;
  return proto.lightstep.collector.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.KeyValue}
 */
proto.lightstep.collector.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setIntValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.lightstep.collector.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lightstep.collector.KeyValue.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_value = 2;
 * @return {string}
 */
proto.lightstep.collector.KeyValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lightstep.collector.KeyValue.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.lightstep.collector.KeyValue.oneofGroups_[0], value);
};


proto.lightstep.collector.KeyValue.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 2, proto.lightstep.collector.KeyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.KeyValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {string}
 */
proto.lightstep.collector.KeyValue.prototype.getIntValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.lightstep.collector.KeyValue.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.lightstep.collector.KeyValue.oneofGroups_[0], value);
};


proto.lightstep.collector.KeyValue.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 3, proto.lightstep.collector.KeyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.KeyValue.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double_value = 4;
 * @return {number}
 */
proto.lightstep.collector.KeyValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.lightstep.collector.KeyValue.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.lightstep.collector.KeyValue.oneofGroups_[0], value);
};


proto.lightstep.collector.KeyValue.prototype.clearDoubleValue = function() {
  jspb.Message.setOneofField(this, 4, proto.lightstep.collector.KeyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.KeyValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bool_value = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lightstep.collector.KeyValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.lightstep.collector.KeyValue.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 5, proto.lightstep.collector.KeyValue.oneofGroups_[0], value);
};


proto.lightstep.collector.KeyValue.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 5, proto.lightstep.collector.KeyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.KeyValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string json_value = 6;
 * @return {string}
 */
proto.lightstep.collector.KeyValue.prototype.getJsonValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.lightstep.collector.KeyValue.prototype.setJsonValue = function(value) {
  jspb.Message.setOneofField(this, 6, proto.lightstep.collector.KeyValue.oneofGroups_[0], value);
};


proto.lightstep.collector.KeyValue.prototype.clearJsonValue = function() {
  jspb.Message.setOneofField(this, 6, proto.lightstep.collector.KeyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.KeyValue.prototype.hasJsonValue = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.Log.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Log.displayName = 'proto.lightstep.collector.Log';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.lightstep.collector.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Log}
 */
proto.lightstep.collector.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Log;
  return proto.lightstep.collector.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Log}
 */
proto.lightstep.collector.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.lightstep.collector.KeyValue;
      reader.readMessage(value,proto.lightstep.collector.KeyValue.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lightstep.collector.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lightstep.collector.Log.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.lightstep.collector.Log.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lightstep.collector.Log.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.Log.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated KeyValue fields = 2;
 * @return {!Array<!proto.lightstep.collector.KeyValue>}
 */
proto.lightstep.collector.Log.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.KeyValue, 2));
};


/** @param {!Array<!proto.lightstep.collector.KeyValue>} value */
proto.lightstep.collector.Log.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lightstep.collector.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.KeyValue}
 */
proto.lightstep.collector.Log.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lightstep.collector.KeyValue, opt_index);
};


proto.lightstep.collector.Log.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Reference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lightstep.collector.Reference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Reference.displayName = 'proto.lightstep.collector.Reference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Reference.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Reference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Reference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Reference.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationship: jspb.Message.getFieldWithDefault(msg, 1, 0),
    spanContext: (f = msg.getSpanContext()) && proto.lightstep.collector.SpanContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Reference}
 */
proto.lightstep.collector.Reference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Reference;
  return proto.lightstep.collector.Reference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Reference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Reference}
 */
proto.lightstep.collector.Reference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lightstep.collector.Reference.Relationship} */ (reader.readEnum());
      msg.setRelationship(value);
      break;
    case 2:
      var value = new proto.lightstep.collector.SpanContext;
      reader.readMessage(value,proto.lightstep.collector.SpanContext.deserializeBinaryFromReader);
      msg.setSpanContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Reference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Reference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Reference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Reference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationship();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSpanContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lightstep.collector.SpanContext.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lightstep.collector.Reference.Relationship = {
  CHILD_OF: 0,
  FOLLOWS_FROM: 1
};

/**
 * optional Relationship relationship = 1;
 * @return {!proto.lightstep.collector.Reference.Relationship}
 */
proto.lightstep.collector.Reference.prototype.getRelationship = function() {
  return /** @type {!proto.lightstep.collector.Reference.Relationship} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.lightstep.collector.Reference.Relationship} value */
proto.lightstep.collector.Reference.prototype.setRelationship = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SpanContext span_context = 2;
 * @return {?proto.lightstep.collector.SpanContext}
 */
proto.lightstep.collector.Reference.prototype.getSpanContext = function() {
  return /** @type{?proto.lightstep.collector.SpanContext} */ (
    jspb.Message.getWrapperField(this, proto.lightstep.collector.SpanContext, 2));
};


/** @param {?proto.lightstep.collector.SpanContext|undefined} value */
proto.lightstep.collector.Reference.prototype.setSpanContext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lightstep.collector.Reference.prototype.clearSpanContext = function() {
  this.setSpanContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.Reference.prototype.hasSpanContext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.Span.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Span.displayName = 'proto.lightstep.collector.Span';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.Span.repeatedFields_ = [3,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    spanContext: (f = msg.getSpanContext()) && proto.lightstep.collector.SpanContext.toObject(includeInstance, f),
    operationName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referencesList: jspb.Message.toObjectList(msg.getReferencesList(),
    proto.lightstep.collector.Reference.toObject, includeInstance),
    startTimestamp: (f = msg.getStartTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    durationMicros: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.lightstep.collector.KeyValue.toObject, includeInstance),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.lightstep.collector.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Span}
 */
proto.lightstep.collector.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Span;
  return proto.lightstep.collector.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Span}
 */
proto.lightstep.collector.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lightstep.collector.SpanContext;
      reader.readMessage(value,proto.lightstep.collector.SpanContext.deserializeBinaryFromReader);
      msg.setSpanContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationName(value);
      break;
    case 3:
      var value = new proto.lightstep.collector.Reference;
      reader.readMessage(value,proto.lightstep.collector.Reference.deserializeBinaryFromReader);
      msg.addReferences(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDurationMicros(value);
      break;
    case 6:
      var value = new proto.lightstep.collector.KeyValue;
      reader.readMessage(value,proto.lightstep.collector.KeyValue.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 7:
      var value = new proto.lightstep.collector.Log;
      reader.readMessage(value,proto.lightstep.collector.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpanContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lightstep.collector.SpanContext.serializeBinaryToWriter
    );
  }
  f = message.getOperationName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lightstep.collector.Reference.serializeBinaryToWriter
    );
  }
  f = message.getStartTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDurationMicros();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.lightstep.collector.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.lightstep.collector.Log.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpanContext span_context = 1;
 * @return {?proto.lightstep.collector.SpanContext}
 */
proto.lightstep.collector.Span.prototype.getSpanContext = function() {
  return /** @type{?proto.lightstep.collector.SpanContext} */ (
    jspb.Message.getWrapperField(this, proto.lightstep.collector.SpanContext, 1));
};


/** @param {?proto.lightstep.collector.SpanContext|undefined} value */
proto.lightstep.collector.Span.prototype.setSpanContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lightstep.collector.Span.prototype.clearSpanContext = function() {
  this.setSpanContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.Span.prototype.hasSpanContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string operation_name = 2;
 * @return {string}
 */
proto.lightstep.collector.Span.prototype.getOperationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lightstep.collector.Span.prototype.setOperationName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Reference references = 3;
 * @return {!Array<!proto.lightstep.collector.Reference>}
 */
proto.lightstep.collector.Span.prototype.getReferencesList = function() {
  return /** @type{!Array<!proto.lightstep.collector.Reference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.Reference, 3));
};


/** @param {!Array<!proto.lightstep.collector.Reference>} value */
proto.lightstep.collector.Span.prototype.setReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lightstep.collector.Reference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.Reference}
 */
proto.lightstep.collector.Span.prototype.addReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lightstep.collector.Reference, opt_index);
};


proto.lightstep.collector.Span.prototype.clearReferencesList = function() {
  this.setReferencesList([]);
};


/**
 * optional google.protobuf.Timestamp start_timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lightstep.collector.Span.prototype.getStartTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.lightstep.collector.Span.prototype.setStartTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.lightstep.collector.Span.prototype.clearStartTimestamp = function() {
  this.setStartTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.Span.prototype.hasStartTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 duration_micros = 5;
 * @return {string}
 */
proto.lightstep.collector.Span.prototype.getDurationMicros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.lightstep.collector.Span.prototype.setDurationMicros = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * repeated KeyValue tags = 6;
 * @return {!Array<!proto.lightstep.collector.KeyValue>}
 */
proto.lightstep.collector.Span.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.KeyValue, 6));
};


/** @param {!Array<!proto.lightstep.collector.KeyValue>} value */
proto.lightstep.collector.Span.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.lightstep.collector.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.KeyValue}
 */
proto.lightstep.collector.Span.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.lightstep.collector.KeyValue, opt_index);
};


proto.lightstep.collector.Span.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated Log logs = 7;
 * @return {!Array<!proto.lightstep.collector.Log>}
 */
proto.lightstep.collector.Span.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.Log, 7));
};


/** @param {!Array<!proto.lightstep.collector.Log>} value */
proto.lightstep.collector.Span.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.lightstep.collector.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.Log}
 */
proto.lightstep.collector.Span.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.lightstep.collector.Log, opt_index);
};


proto.lightstep.collector.Span.prototype.clearLogsList = function() {
  this.setLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Reporter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.Reporter.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.Reporter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Reporter.displayName = 'proto.lightstep.collector.Reporter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.Reporter.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Reporter.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Reporter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Reporter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Reporter.toObject = function(includeInstance, msg) {
  var f, obj = {
    reporterId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.lightstep.collector.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Reporter}
 */
proto.lightstep.collector.Reporter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Reporter;
  return proto.lightstep.collector.Reporter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Reporter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Reporter}
 */
proto.lightstep.collector.Reporter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReporterId(value);
      break;
    case 4:
      var value = new proto.lightstep.collector.KeyValue;
      reader.readMessage(value,proto.lightstep.collector.KeyValue.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Reporter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Reporter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Reporter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Reporter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReporterId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.lightstep.collector.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 reporter_id = 1;
 * @return {string}
 */
proto.lightstep.collector.Reporter.prototype.getReporterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.lightstep.collector.Reporter.prototype.setReporterId = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * repeated KeyValue tags = 4;
 * @return {!Array<!proto.lightstep.collector.KeyValue>}
 */
proto.lightstep.collector.Reporter.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.KeyValue, 4));
};


/** @param {!Array<!proto.lightstep.collector.KeyValue>} value */
proto.lightstep.collector.Reporter.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lightstep.collector.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.KeyValue}
 */
proto.lightstep.collector.Reporter.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lightstep.collector.KeyValue, opt_index);
};


proto.lightstep.collector.Reporter.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.MetricsSample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lightstep.collector.MetricsSample.oneofGroups_);
};
goog.inherits(proto.lightstep.collector.MetricsSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.MetricsSample.displayName = 'proto.lightstep.collector.MetricsSample';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lightstep.collector.MetricsSample.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.lightstep.collector.MetricsSample.ValueCase = {
  VALUE_NOT_SET: 0,
  INT_VALUE: 2,
  DOUBLE_VALUE: 3
};

/**
 * @return {proto.lightstep.collector.MetricsSample.ValueCase}
 */
proto.lightstep.collector.MetricsSample.prototype.getValueCase = function() {
  return /** @type {proto.lightstep.collector.MetricsSample.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lightstep.collector.MetricsSample.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.MetricsSample.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.MetricsSample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.MetricsSample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.MetricsSample.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    doubleValue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.MetricsSample}
 */
proto.lightstep.collector.MetricsSample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.MetricsSample;
  return proto.lightstep.collector.MetricsSample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.MetricsSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.MetricsSample}
 */
proto.lightstep.collector.MetricsSample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setIntValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.MetricsSample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.MetricsSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.MetricsSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.MetricsSample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lightstep.collector.MetricsSample.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lightstep.collector.MetricsSample.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 int_value = 2;
 * @return {string}
 */
proto.lightstep.collector.MetricsSample.prototype.getIntValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.lightstep.collector.MetricsSample.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.lightstep.collector.MetricsSample.oneofGroups_[0], value);
};


proto.lightstep.collector.MetricsSample.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 2, proto.lightstep.collector.MetricsSample.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.MetricsSample.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double double_value = 3;
 * @return {number}
 */
proto.lightstep.collector.MetricsSample.prototype.getDoubleValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.lightstep.collector.MetricsSample.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.lightstep.collector.MetricsSample.oneofGroups_[0], value);
};


proto.lightstep.collector.MetricsSample.prototype.clearDoubleValue = function() {
  jspb.Message.setOneofField(this, 3, proto.lightstep.collector.MetricsSample.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.MetricsSample.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.InternalMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.InternalMetrics.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.InternalMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.InternalMetrics.displayName = 'proto.lightstep.collector.InternalMetrics';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.InternalMetrics.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.InternalMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.InternalMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.InternalMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.InternalMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTimestamp: (f = msg.getStartTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    durationMicros: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.lightstep.collector.Log.toObject, includeInstance),
    countsList: jspb.Message.toObjectList(msg.getCountsList(),
    proto.lightstep.collector.MetricsSample.toObject, includeInstance),
    gaugesList: jspb.Message.toObjectList(msg.getGaugesList(),
    proto.lightstep.collector.MetricsSample.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.InternalMetrics}
 */
proto.lightstep.collector.InternalMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.InternalMetrics;
  return proto.lightstep.collector.InternalMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.InternalMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.InternalMetrics}
 */
proto.lightstep.collector.InternalMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDurationMicros(value);
      break;
    case 3:
      var value = new proto.lightstep.collector.Log;
      reader.readMessage(value,proto.lightstep.collector.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 4:
      var value = new proto.lightstep.collector.MetricsSample;
      reader.readMessage(value,proto.lightstep.collector.MetricsSample.deserializeBinaryFromReader);
      msg.addCounts(value);
      break;
    case 5:
      var value = new proto.lightstep.collector.MetricsSample;
      reader.readMessage(value,proto.lightstep.collector.MetricsSample.deserializeBinaryFromReader);
      msg.addGauges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.InternalMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.InternalMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.InternalMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.InternalMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDurationMicros();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lightstep.collector.Log.serializeBinaryToWriter
    );
  }
  f = message.getCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.lightstep.collector.MetricsSample.serializeBinaryToWriter
    );
  }
  f = message.getGaugesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lightstep.collector.MetricsSample.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp start_timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lightstep.collector.InternalMetrics.prototype.getStartTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.lightstep.collector.InternalMetrics.prototype.setStartTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lightstep.collector.InternalMetrics.prototype.clearStartTimestamp = function() {
  this.setStartTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.InternalMetrics.prototype.hasStartTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 duration_micros = 2;
 * @return {string}
 */
proto.lightstep.collector.InternalMetrics.prototype.getDurationMicros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.lightstep.collector.InternalMetrics.prototype.setDurationMicros = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated Log logs = 3;
 * @return {!Array<!proto.lightstep.collector.Log>}
 */
proto.lightstep.collector.InternalMetrics.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.Log, 3));
};


/** @param {!Array<!proto.lightstep.collector.Log>} value */
proto.lightstep.collector.InternalMetrics.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lightstep.collector.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.Log}
 */
proto.lightstep.collector.InternalMetrics.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lightstep.collector.Log, opt_index);
};


proto.lightstep.collector.InternalMetrics.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * repeated MetricsSample counts = 4;
 * @return {!Array<!proto.lightstep.collector.MetricsSample>}
 */
proto.lightstep.collector.InternalMetrics.prototype.getCountsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.MetricsSample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.MetricsSample, 4));
};


/** @param {!Array<!proto.lightstep.collector.MetricsSample>} value */
proto.lightstep.collector.InternalMetrics.prototype.setCountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lightstep.collector.MetricsSample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.MetricsSample}
 */
proto.lightstep.collector.InternalMetrics.prototype.addCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lightstep.collector.MetricsSample, opt_index);
};


proto.lightstep.collector.InternalMetrics.prototype.clearCountsList = function() {
  this.setCountsList([]);
};


/**
 * repeated MetricsSample gauges = 5;
 * @return {!Array<!proto.lightstep.collector.MetricsSample>}
 */
proto.lightstep.collector.InternalMetrics.prototype.getGaugesList = function() {
  return /** @type{!Array<!proto.lightstep.collector.MetricsSample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.MetricsSample, 5));
};


/** @param {!Array<!proto.lightstep.collector.MetricsSample>} value */
proto.lightstep.collector.InternalMetrics.prototype.setGaugesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lightstep.collector.MetricsSample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.MetricsSample}
 */
proto.lightstep.collector.InternalMetrics.prototype.addGauges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lightstep.collector.MetricsSample, opt_index);
};


proto.lightstep.collector.InternalMetrics.prototype.clearGaugesList = function() {
  this.setGaugesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lightstep.collector.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Auth.displayName = 'proto.lightstep.collector.Auth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Auth.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Auth}
 */
proto.lightstep.collector.Auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Auth;
  return proto.lightstep.collector.Auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Auth}
 */
proto.lightstep.collector.Auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.lightstep.collector.Auth.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lightstep.collector.Auth.prototype.setAccessToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.ReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.ReportRequest.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.ReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.ReportRequest.displayName = 'proto.lightstep.collector.ReportRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.ReportRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.ReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.ReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.ReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.ReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reporter: (f = msg.getReporter()) && proto.lightstep.collector.Reporter.toObject(includeInstance, f),
    auth: (f = msg.getAuth()) && proto.lightstep.collector.Auth.toObject(includeInstance, f),
    spansList: jspb.Message.toObjectList(msg.getSpansList(),
    proto.lightstep.collector.Span.toObject, includeInstance),
    timestampOffsetMicros: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    internalMetrics: (f = msg.getInternalMetrics()) && proto.lightstep.collector.InternalMetrics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.ReportRequest}
 */
proto.lightstep.collector.ReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.ReportRequest;
  return proto.lightstep.collector.ReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.ReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.ReportRequest}
 */
proto.lightstep.collector.ReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lightstep.collector.Reporter;
      reader.readMessage(value,proto.lightstep.collector.Reporter.deserializeBinaryFromReader);
      msg.setReporter(value);
      break;
    case 2:
      var value = new proto.lightstep.collector.Auth;
      reader.readMessage(value,proto.lightstep.collector.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 3:
      var value = new proto.lightstep.collector.Span;
      reader.readMessage(value,proto.lightstep.collector.Span.deserializeBinaryFromReader);
      msg.addSpans(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestampOffsetMicros(value);
      break;
    case 6:
      var value = new proto.lightstep.collector.InternalMetrics;
      reader.readMessage(value,proto.lightstep.collector.InternalMetrics.deserializeBinaryFromReader);
      msg.setInternalMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.ReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.ReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.ReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.ReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReporter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lightstep.collector.Reporter.serializeBinaryToWriter
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lightstep.collector.Auth.serializeBinaryToWriter
    );
  }
  f = message.getSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lightstep.collector.Span.serializeBinaryToWriter
    );
  }
  f = message.getTimestampOffsetMicros();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getInternalMetrics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lightstep.collector.InternalMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reporter reporter = 1;
 * @return {?proto.lightstep.collector.Reporter}
 */
proto.lightstep.collector.ReportRequest.prototype.getReporter = function() {
  return /** @type{?proto.lightstep.collector.Reporter} */ (
    jspb.Message.getWrapperField(this, proto.lightstep.collector.Reporter, 1));
};


/** @param {?proto.lightstep.collector.Reporter|undefined} value */
proto.lightstep.collector.ReportRequest.prototype.setReporter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lightstep.collector.ReportRequest.prototype.clearReporter = function() {
  this.setReporter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.ReportRequest.prototype.hasReporter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Auth auth = 2;
 * @return {?proto.lightstep.collector.Auth}
 */
proto.lightstep.collector.ReportRequest.prototype.getAuth = function() {
  return /** @type{?proto.lightstep.collector.Auth} */ (
    jspb.Message.getWrapperField(this, proto.lightstep.collector.Auth, 2));
};


/** @param {?proto.lightstep.collector.Auth|undefined} value */
proto.lightstep.collector.ReportRequest.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lightstep.collector.ReportRequest.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.ReportRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Span spans = 3;
 * @return {!Array<!proto.lightstep.collector.Span>}
 */
proto.lightstep.collector.ReportRequest.prototype.getSpansList = function() {
  return /** @type{!Array<!proto.lightstep.collector.Span>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.Span, 3));
};


/** @param {!Array<!proto.lightstep.collector.Span>} value */
proto.lightstep.collector.ReportRequest.prototype.setSpansList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lightstep.collector.Span=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.Span}
 */
proto.lightstep.collector.ReportRequest.prototype.addSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lightstep.collector.Span, opt_index);
};


proto.lightstep.collector.ReportRequest.prototype.clearSpansList = function() {
  this.setSpansList([]);
};


/**
 * optional int64 timestamp_offset_micros = 5;
 * @return {string}
 */
proto.lightstep.collector.ReportRequest.prototype.getTimestampOffsetMicros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.lightstep.collector.ReportRequest.prototype.setTimestampOffsetMicros = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional InternalMetrics internal_metrics = 6;
 * @return {?proto.lightstep.collector.InternalMetrics}
 */
proto.lightstep.collector.ReportRequest.prototype.getInternalMetrics = function() {
  return /** @type{?proto.lightstep.collector.InternalMetrics} */ (
    jspb.Message.getWrapperField(this, proto.lightstep.collector.InternalMetrics, 6));
};


/** @param {?proto.lightstep.collector.InternalMetrics|undefined} value */
proto.lightstep.collector.ReportRequest.prototype.setInternalMetrics = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.lightstep.collector.ReportRequest.prototype.clearInternalMetrics = function() {
  this.setInternalMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.ReportRequest.prototype.hasInternalMetrics = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lightstep.collector.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.Command.displayName = 'proto.lightstep.collector.Command';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    disable: jspb.Message.getFieldWithDefault(msg, 1, false),
    devMode: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.Command}
 */
proto.lightstep.collector.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.Command;
  return proto.lightstep.collector.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.Command}
 */
proto.lightstep.collector.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDevMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDevMode();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool disable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lightstep.collector.Command.prototype.getDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.lightstep.collector.Command.prototype.setDisable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool dev_mode = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lightstep.collector.Command.prototype.getDevMode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.lightstep.collector.Command.prototype.setDevMode = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lightstep.collector.ReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lightstep.collector.ReportResponse.repeatedFields_, null);
};
goog.inherits(proto.lightstep.collector.ReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lightstep.collector.ReportResponse.displayName = 'proto.lightstep.collector.ReportResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lightstep.collector.ReportResponse.repeatedFields_ = [1,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lightstep.collector.ReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lightstep.collector.ReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lightstep.collector.ReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.ReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.lightstep.collector.Command.toObject, includeInstance),
    receiveTimestamp: (f = msg.getReceiveTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    transmitTimestamp: (f = msg.getTransmitTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    errorsList: jspb.Message.getRepeatedField(msg, 4),
    warningsList: jspb.Message.getRepeatedField(msg, 5),
    infosList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lightstep.collector.ReportResponse}
 */
proto.lightstep.collector.ReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lightstep.collector.ReportResponse;
  return proto.lightstep.collector.ReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lightstep.collector.ReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lightstep.collector.ReportResponse}
 */
proto.lightstep.collector.ReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lightstep.collector.Command;
      reader.readMessage(value,proto.lightstep.collector.Command.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReceiveTimestamp(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTransmitTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lightstep.collector.ReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lightstep.collector.ReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lightstep.collector.ReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lightstep.collector.ReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lightstep.collector.Command.serializeBinaryToWriter
    );
  }
  f = message.getReceiveTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTransmitTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * repeated Command commands = 1;
 * @return {!Array<!proto.lightstep.collector.Command>}
 */
proto.lightstep.collector.ReportResponse.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.lightstep.collector.Command>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lightstep.collector.Command, 1));
};


/** @param {!Array<!proto.lightstep.collector.Command>} value */
proto.lightstep.collector.ReportResponse.prototype.setCommandsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lightstep.collector.Command=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lightstep.collector.Command}
 */
proto.lightstep.collector.ReportResponse.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lightstep.collector.Command, opt_index);
};


proto.lightstep.collector.ReportResponse.prototype.clearCommandsList = function() {
  this.setCommandsList([]);
};


/**
 * optional google.protobuf.Timestamp receive_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lightstep.collector.ReportResponse.prototype.getReceiveTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.lightstep.collector.ReportResponse.prototype.setReceiveTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lightstep.collector.ReportResponse.prototype.clearReceiveTimestamp = function() {
  this.setReceiveTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.ReportResponse.prototype.hasReceiveTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp transmit_timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lightstep.collector.ReportResponse.prototype.getTransmitTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.lightstep.collector.ReportResponse.prototype.setTransmitTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lightstep.collector.ReportResponse.prototype.clearTransmitTimestamp = function() {
  this.setTransmitTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lightstep.collector.ReportResponse.prototype.hasTransmitTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string errors = 4;
 * @return {!Array<string>}
 */
proto.lightstep.collector.ReportResponse.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.lightstep.collector.ReportResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.lightstep.collector.ReportResponse.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.lightstep.collector.ReportResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * repeated string warnings = 5;
 * @return {!Array<string>}
 */
proto.lightstep.collector.ReportResponse.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.lightstep.collector.ReportResponse.prototype.setWarningsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.lightstep.collector.ReportResponse.prototype.addWarnings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.lightstep.collector.ReportResponse.prototype.clearWarningsList = function() {
  this.setWarningsList([]);
};


/**
 * repeated string infos = 6;
 * @return {!Array<string>}
 */
proto.lightstep.collector.ReportResponse.prototype.getInfosList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.lightstep.collector.ReportResponse.prototype.setInfosList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.lightstep.collector.ReportResponse.prototype.addInfos = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.lightstep.collector.ReportResponse.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


goog.object.extend(exports, proto.lightstep.collector);
